import React, { useState, useEffect } from "react";
import dynamic from "next/dynamic";
import LazyLoad from "react-lazyload";
import Link from "next/link";
import Product from "../../components/atom/Product";
import HeaderComponent from "../../components/atom/HeaderComponent";
import axios from "../../redux/actions/axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faWindowClose } from "@fortawesome/free-solid-svg-icons";
import InfiniteScroll from "react-infinite-scroll-component";
import Head from "next/head";
import { withTranslation } from "../../i18n";
import Header from "../../components/layout/partials/Header";
import styles from "../../styles/CampaignPage.module.scss";
import Loading from "../../components/atom/Loading";
const OfferComponent = dynamic(() =>
  import("../../components/offer/OfferComponent")
);

function Index(props) {
  const { t } = props;
  const [offers, setOffers] = useState();
  const [products, setProducts] = useState();
  const [categoryParams, setCategoryParams] = useState(props.id);
  const [categoryName, setCategoryName] = useState();
  const [mFilter, setMFilter] = useState(false);
  const [empty, setEmpty] = useState(false);
  const [items, setItems] = useState();
  const [hasMore, setHasMore] = useState(true);
  const [nextPage, setNextPage] = useState();
  const [notFound, setNotFound] = useState(false);

  return (
    <div className="container my-2">
      <Head>
        <title>Campaigns | Beautyboothqa</title>
      </Head>
      {props.offers.map((offer) => (
        <LazyLoad
          offset={[-200, 0]}
          placeholder={<Loading text={"loading.."} />}
          debounce={200}
          once
        >
          <OfferComponent offer={offer} language={props.language} />
        </LazyLoad>
      ))}
      
    </div>
  );
}
export async function getServerSideProps(context) {
  let language = context.req.language || "en";

  const offers = await axios
    .get(language + "/getdata/campaign_offers")
    .then((res) => {
      return res.data.categories;
    })
    .catch();
  return {
    props: {
      id: context.query?.id ? context.query.id : "",
      offers,
      language,
    },
  };
}
export default withTranslation("common")(Index);
